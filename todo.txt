> Chronic Obstructive Pulmonary Disease

(number) (number or words) (number) (number) (number#number) (words anf the rest of the sentence)
=======================
== useful INFO
=======================
common cols
>pmid
>DiseaseId
>geneID

uniq sources from gene_disease
> GENOMICS_ENGLAND,CTD_human,MGD,PSYGENET,GWASDB,CLINVAR,CLINGEN,RGD,CTD_mouse,BEFREE,CTD_rat,GWASCAT,UNIPROT,LHGDN

======================
=== dataset information
======================
>info of gene_disease_uniq dataset
    excluded: DSI, DPI, diseaseType, diseaseSemanticType, score, EI, YearInitial, YearFinal

    >1137270 instances

    uniq value of the following columns
    geneId, geneSymbol, diseaseId, diseaseName, diseaseClass, pmid,   source
    16628   16624       9463       9434         815           398198  14
        note: I skipped some row that has no diseaseClass in it.[pattern to extract other col's vals are not clear]
        >> len of cols are equal because I rolled back those cols in which its value is empty.

>create unique  pmid, geneId, diseaseId (Pubannotator.py)
    excluded: section, sentence_number, geneoffset, diseaseoffsets, sentence
    :Does geneId, diseaseId  used in both files have the same standard? If not figure out how to link them
    :2234 instances
    :1668 uniq_instances
    :pmid = 698, geneID = 512, geneID = 117 (uniq)
    Question:
        What is gene off set?

> There are 6110 gene_disease_uniq mapping to DO.
        :There are 15675 mapping to DO
        :There are 97501 mapping in total.
            >>some of the vocab source map to the same CUIs

> get parentId of the top 20 maximum member count
    :check for all 3 files: parent, parent_parent, parent_intersect
    >> uniq class label must not be children or parent of other class label.
        :how to check if the lable is a children or parent of the other class label?

    :mapp of gene_disease.tsv is as shown below
    >> uniq_CUIs -> DOID -> DOID parent

    :selected class labels
       >> len = 16 classes label -> 14 is legal, 2 is not.
            :225 and 1826 are not legal

       >>0050736,225,0050737,936,37,934,2256,0080015,0050338,5614,9252,1826,0050889,2978,423,331,870
           :uniq children_DOID in order: [64, 62, 19, 27, 47, 16, 26, 25, 22, 20, 3, 11, 11, 12, 8]

        >0050736    autosomal dominant disease
            :151 DOID
        NO >225        syndrome
                :112 DOID
        >0050737    autosomal recessive disease
            :93 DOID
        >936        brain disease
            :71 DOID
        >37         skin disease
            :68 DOID
        >934        viral infectious disease
            :59 DOID
        >2256       osteochondrodysplasia (developmental disorders of the skeletal system)
            :50 DOID
        >0080015    physical disorder
            :50 DOID
        >0050338    primary bacterial infectious disease
            :48 DOID
        >5614       eye disease
            :47 DOID
        NO >1826       epilepsy (children 936:brain disease)
                :46 DOID
        >9252       amino acid metabolic disorder
            :42 DOID

        >0050889    non-syndromic intellectual disability
            :42 DOID
        >2978       carbohydrate metabolic disorder
            :42 DOID
        >423        myopathy
            :35 DOID
        >870        neuropathy
            :34 DOID

        OTHER CODE IN SORTED ODER: 331 1289 1279 480

    >>step to collect dataset that belongs to the given classes
        1.create dict to map DOIDs that have the same parent or itself exists in the dataset
            :{parent_DOID: [DOID of parent's children, or the parent_DOID itself (if exist in the dataset)]}

        2.create dict that map DOID to its corresponding uniq CUIs
            :{DOID: uniq_CUIs}

        3. collect CUIs that can be mapped to DOID in step 2
            : this is the number of member in the classes.

        4. add class label to gene_disease_1000.txt
             >> also create class label to all of the instances in gene_disease.tsv
                :have i created the file? if i did what is it called?
             : {label: [lsit of cuis]} obtained in step 3

=======================
=== Doing
=======================
> push to github
    :ignore dataset folder.

> re-factor map_umls.py then moving on to plotting them
> list out method that need to be adjusted before ploting them
> plot gene_disease_50000_label_no_None.txt
    >> add class methods that do the following
        : add color according to class_label in which node belong
            :: node_label (cuis) vs class_label (DOID)
                >>>should I have option to plot both of them? I think it should have both optoin
        : plot graph with labels nodes color.

> try using gene_disease_50000_label_no_None.txt with keras-GCN
    :figure out a way to feed my data into Graph Convolutional Neural network i have created
    >> if it works and produce promising result,
        proceed to add kers-GCN to DisGeNER.
        :Do I need to plot to get result?

> In all_gene_disease_pmid_association.py ( I should run this at fau)
    >>use gene_disease_uniq_DO_mapping to create /generated/all_gene_disease_pmid_no_None.txt
    >> after than, use map_umls.py to create /demo/all_gene_disease_pmid.txt



## spring 2019 final project tasks (check if I have finished all of them)
1. List of copd related diseas and genes extracted (disease names, genee names, also number of members in each category)
2. Show the copd related gene neworks, disae networks, and gene-disease networks (including network characteristics, such as degree distributions)
3. Find a community of (gene-disease), report who are the genes and diseases in these communities.

====================
===Error
====================
>bipartite = True
vertices ('pmid', 'geneId')
all_Vertice 551

>bipartite = False
vertices ['pmid', 'geneId', 'diseaseId']
vertices_flat 621

> createEdges return unique pair.
> bipartite = False has more edges than bipartite = True

> fix so that setEdgesOffset uses collection.Count

> fix so that createBipartite return edges of selected keys
> create a function that input = keys, output = list of each key's member
> pass the vertices whose key = pair
    :should i use key to choose vertices?


> def plot_bipartite = 466

> def setEdges_len_offset = 513
> def setColor_legend = 554

> def plot_networkx = 575
> def plotGraph_with_legend = 312

> def plotGraph = 630
> def plotGraph_with_legend = 318

> def plot_bipartite = 466

> main:
    >copd_graph = COPD_grpah() => 690
    >copd_graph.plot_bipartite() = 704
    >cop_graph.plotGraph() = 710


HERE>> figure out how to combine plot_networkx and plot_subgrpah
>report the following
    :getDisconnected Graph
    :number of disconnected-component
    :edge Density

    >network Centrality
    >node similarity
    >network community detection
    >link-prediction

ValueError: 'c' argument has 1242 elements, which is not acceptable for use with 'x' with size 621, 'y' with size 621.

> make vertices_flat, color_legend, global
>what is the different between get_node_color and getColor_list
> what is setup() for??


>report_Graph_properties( G, degree_dist = None)

> get graph and nodes characteristic

> community detection steps
    :plot bipartite graph (the graph allow for disconnected subgraph)
        steps
        >get seperated bipartite graph
        >convert to adjacency matrix
        >use igrpah in r to do more intensive work
            :igraph is more flexible
        >create program so that
            :there is no need to run both in r and in python

    :get pattern of common node edges structure.
            > design a generic wya fo detect specific pattern in the grpah?
                read: "Spectral measures of bipartivity in complex networks"
    :get disconnected graph
    :use method availble in
        netwokx.algorithms.bipartite

>report charcteristic
    :create method to support it
        >> desgin it carefully

    :what should I report?
        :Graph degree
        :clustering
        :centrality
        :adjacency matrix?
            >(generate it then it would be very easy to transfer to differen platform
        :clique?
            >number of clique, max clique

>detect bipartite of every pair of cols.
    >detect community of it
    url: https://networkx.github.io/documentation/stable/reference/algorithms/community.html
    3 criteria
    Bipartite
    > network measure
        *:degree distribution
            eg Poisson vs Power-law
            >plot freqeuncey vs Degree
            >plot Cumulative Distritubtion
        :number of disconnected-component
        *:clustering
            >triangles
            >transitivity (?)
            >clustring

    > network Centrality
        *:degree Centrl
        *: eigenvector Ventral
        :between Centrl
            >(probly we don't need it because it's bipartite)
        :Closeness Centrl (
            >do i need it for bipartite?
            > I get a feeling that it will be very similar to degree central
        >Group Centrality?
            >(I doubt that we gonna need it at all)

    > node similarity
        >> similarity of nodes in the sme group
        :common nodes
        :jaccard's coefficient
        :RootedPageRank
        :SimRAnk
        >>represent similarity in lower dimension
            :lower rank approximation
            eg SVD
    >network community detection
        :node-centric community
        :Group-centric community
            :MDS
        :network-centric community
            :k-clique, k-club
            :k-plex, k-core ( probly not)
            >>cut-minimization
                :karger, ford-fulkerson
    > link-prediction
        >collaborated-filetering
        >supervised learning (ML)
    > or just use existed community detection available
        >  python-louvain on pypi

        > Generators
            : functions for generating grphs with commnity structure
        :K-clique
        :Partitions via centrality measures
        :Validating partitions (?)
        :label propagation (?)
        :Bipartitions (?)
            >what is the piont of this?




    full graph
    > network measure
        :degree distriubtion
        :number of disconnected-component
        :Diameters
        :edge Density
        :Clustering Coefficient
        :shortest Path

    > netowkr Centrality
        :degree
    > node similarity
        :common neight
        :Jaccard coeff
        :Katz
    > or just use existed community detection available
        :or api


> disease_naem in gene_disease_5000 has different columns
    > columns of disease Name is not correct.
        >>( lets ignore it for now)
        >>figure out a way to deal with this embiguity

    Q: is Pradoxical in DiseaseType or diseaseName?
        diseaseType = "Paradoxical disease"
    > how to separate value of DiseaseType to value of diseaseName?
        :some of them is separated by "," some of them is separated by " "
            >> how to use regularexpression with it tho ?


> link diseaseId and geneId from PubAnnotator to all_gene_disease_pmid_associations
    >figure the differnet between val of col of the same name
    :geneId of the two file followed different convention
        >>undetstnd what is the different between the two convention

> use NER to collect disease Name or Gene Name mention in sentence
    :Then search these new collection of  disease to Gene in PubAnnotator
        col = "sentence" to get even more number of gene, disease
        >> save number of iteration to be uses as path length from COPD later on

    :repeat the process until no new info is collected